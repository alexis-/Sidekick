<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:expressionsViewModels="clr-namespace:Sidekick.FilterBuilder.Expressions"
                    xmlns:catel="http://catel.codeplex.com"
                    xmlns:filterBuilderConverters="clr-namespace:Sidekick.FilterBuilder.Converters"
                    xmlns:converters="clr-namespace:Sidekick.Windows.Converters"
                    xmlns:behaviors="clr-namespace:Sidekick.WPF.Behaviors;assembly=Sidekick.WPF"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:filterBuilder="clr-namespace:Sidekick.FilterBuilder"
                    xmlns:controls="clr-namespace:Sidekick.WPF.Controls;assembly=Sidekick.WPF"
                    xmlns:mahAppsControls="http://metro.mahapps.com/winfx/xaml/controls">

  <HierarchicalDataTemplate DataType="{x:Type expressionsViewModels:PropertyExpression}"
                            ItemsSource="{Binding Items}">

    <HierarchicalDataTemplate.Resources>
      <catel:ObjectToDisplayNameConverter x:Key="ObjectToDisplayNameConverter" />
      <BooleanToVisibilityConverter x:Key="VisibilityConverter" />
      <filterBuilderConverters:ValueControlTypeVisibilityConverter x:Key="ValueControlTypeVisibilityConverter" />
      <filterBuilderConverters:DataTypeExpressionToConditionsConverter x:Key="DataTypeExpressionToConditionsConverter" />

      <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <!--<Setter Property="behaviors:ComboBoxWidthFromMaxItemWidthBehavior.ComboBoxWidthFromMaxItemWidth" Value="True" />-->
        <!--<Setter Property="Width" Value="120" />-->
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="16 0 0 0" />
      </Style>

      <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Width" Value="80" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="16 0 0 0" />
      </Style>

      <Style TargetType="DatePicker" BasedOn="{StaticResource {x:Type DatePicker}}">
        <Setter Property="Width" Value="80" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="16 0 0 0" />
      </Style>

    </HierarchicalDataTemplate.Resources>

    <Border BorderBrush="{DynamicResource GrayBrush9}"
            BorderThickness="0 1 1 1">

      <StackPanel Orientation="Horizontal"
                  Background="{DynamicResource WhiteBrush}"
                  Height="60">

        <!--Property-->
        <ComboBox
          ItemsSource="{Binding DataContext.TargetProperties, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}"
          DisplayMemberPath="DisplayName"
          SelectedItem="{Binding Property, NotifyOnValidationError=True, ValidatesOnDataErrors=True}"
          Width="120" />

        <!--Comparison operator-->
        <ComboBox
          ItemsSource="{Binding DataTypeExpression, Converter={filterBuilderConverters:DataTypeExpressionToConditionsConverter}}"
          SelectedItem="{Binding DataTypeExpression.SelectedCondition}"
          Width="80">
          <ComboBox.ItemTemplate>
            <DataTemplate>
              <TextBlock Text="{Binding Converter={StaticResource ObjectToDisplayNameConverter}}" />
            </DataTemplate>
          </ComboBox.ItemTemplate>
        </ComboBox>

        <!--Value types-->
        <Grid Visibility="{Binding DataTypeExpression.IsValueRequired, Converter={StaticResource VisibilityConverter}}"
              Margin="0">
          <TextBox Text="{Binding DataTypeExpression.Value}"
                   Visibility="{Binding DataTypeExpression.ValueControlType, Converter={StaticResource ValueControlTypeVisibilityConverter}, ConverterParameter={x:Static filterBuilder:ValueControlType.Text}}">
            <i:Interaction.Behaviors>
              <catel:UpdateBindingOnTextChanged UpdateDelay="500" />
              <!--<catel:AutoCompletion PropertyName="{Binding Property.Name, Mode=OneWay}" ItemsSource="{Binding DataContext.RawCollection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}" 
                                                              IsEnabled="{Binding DataContext.EnableAutoCompletion, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}"/>-->
            </i:Interaction.Behaviors>
          </TextBox>

          <TextBox Text="{Binding DataTypeExpression.Value}">
            <TextBox.Visibility>
              <Binding Path="DataTypeExpression.ValueControlType"
                       Converter="{StaticResource ValueControlTypeVisibilityConverter}">
                <Binding.ConverterParameter>
                  <x:Array Type="{x:Type filterBuilder:ValueControlType}">
                    <filterBuilder:ValueControlType>Byte</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>SByte</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Short</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>UnsignedShort</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Integer</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>UnsignedInteger</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Long</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>UnsignedLong</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Decimal</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Float</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Double</filterBuilder:ValueControlType>
                    <filterBuilder:ValueControlType>Numeric</filterBuilder:ValueControlType>
                  </x:Array>
                </Binding.ConverterParameter>
              </Binding>
            </TextBox.Visibility>
            <i:Interaction.Behaviors>
              <catel:NumericTextBox IsDecimalAllowed="{Binding DataTypeExpression.IsDecimal}"
                                    IsNegativeAllowed="{Binding DataTypeExpression.IsSigned}"
                                    UpdateBindingOnTextChanged="False" />
              <catel:UpdateBindingOnTextChanged UpdateDelay="500" />
            </i:Interaction.Behaviors>
          </TextBox>

          <DatePicker SelectedDate="{Binding DataTypeExpression.Value}"
                      Visibility="{Binding DataTypeExpression.ValueControlType, Converter={StaticResource ValueControlTypeVisibilityConverter}, ConverterParameter={x:Static filterBuilder:ValueControlType.DateTime}}" />

          <ComboBox ItemsSource="{Binding DataTypeExpression.BooleanValues}"
                    SelectedValue="{Binding DataTypeExpression.Value}"
                    Visibility="{Binding DataTypeExpression.ValueControlType, Converter={StaticResource ValueControlTypeVisibilityConverter}, ConverterParameter={x:Static filterBuilder:ValueControlType.Boolean}}"
                    Width="80" />

          <StackPanel Orientation="Horizontal"
                      Visibility="{Binding DataTypeExpression.ValueControlType, Converter={StaticResource ValueControlTypeVisibilityConverter}, ConverterParameter={x:Static filterBuilder:ValueControlType.TimeSpan}}">
            <ComboBox ItemsSource="{Binding DataTypeExpression.SpanTypes}"
                      SelectedValue="{Binding DataTypeExpression.SelectedSpanType}"
                      Width="120" />
            <TextBox Text="{Binding DataTypeExpression.Amount}">
              <i:Interaction.Behaviors>
                <catel:NumericTextBox IsDecimalAllowed="False"
                                      IsNegativeAllowed="False"
                                      UpdateBindingOnTextChanged="False" />

                <catel:UpdateBindingOnTextChanged UpdateDelay="500" />
              </i:Interaction.Behaviors>
            </TextBox>
          </StackPanel>
        </Grid>

        <!--<Rectangle Style="{DynamicResource HorizontalSeparator}"
                 Margin="32 0 0 0" />-->

        <Button Content="{catel:LanguageBinding FilterBuilder_And}"
                Height="28"
                Width="36"
                BorderThickness=".6 .6 .3 .6"
                mahAppsControls:ControlsHelper.CornerRadius="3 0 0 3"
                Focusable="False"
                Command="{Binding DataContext.AddAndConditionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}"
                CommandParameter="{Binding}"
                Margin="48 0 0 0" />
        <Button Content="{catel:LanguageBinding FilterBuilder_Or}"
                Height="28"
                Width="36"
                BorderThickness=".6 .6 .3 .6"
                mahAppsControls:ControlsHelper.CornerRadius="0 3 3 0"
                Focusable="False"
                Command="{Binding DataContext.AddOrConditionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}"
                CommandParameter="{Binding}" />

        <controls:FlatIconizableButton ToolTip="{catel:LanguageBinding FilterBuilder_DeleteItem}"
                                       Icon="{StaticResource appbar_close}"
                                       IconSize="10 10"
                                       Background="Transparent"
                                       Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}"
                                       CommandParameter="{Binding}"
                                       Focusable="False"
                                       Margin="16 8 8 0"
                                       VerticalAlignment="Top" />

      </StackPanel>

    </Border>

  </HierarchicalDataTemplate>

</ResourceDictionary>